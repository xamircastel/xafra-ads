package com.develop.job.ads.api;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.develop.job.ads.impls.SmartRedirectProcessor;

/**
 * Controller para manejo de redirecci√≥n inteligente basada en performance
 * Endpoints:
 * - /smart/tr/{customer_id_encrypted}/ ‚Üí Tracking autom√°tico por customer
 * - /smart/{customer_id_encrypted}/ ‚Üí Tracking externo por customer
 */
@RestController
@RequestMapping("/smart")
public class SmartRedirectController {

	private static final Logger log = LoggerFactory.getLogger(SmartRedirectController.class);

	// Constructor para verificar que Spring est√° cargando el controller
	public SmartRedirectController() {
		log.info("üöÄ SmartRedirectController INITIALIZED - Controller is being loaded by Spring!");
	}

	@Autowired
	private SmartRedirectProcessor smartRedirectProcessor;

	@Value("${password.encription}")
	private String passEncription;

	/**
	 * Endpoint de prueba para verificar que el controller funciona
	 */
	@GetMapping("/test")
	public String testEndpoint() {
		log.info("üß™ TEST ENDPOINT CALLED - SmartRedirectController is working!");
		return "SmartRedirectController is working! Time: " + System.currentTimeMillis();
	}

	/**
	 * Endpoint para redirecci√≥n inteligente con tracking autom√°tico
	 * URL: /smartredirect/tr/{customer_id_encrypted}/
	 */
	@GetMapping("/tr/{customerParam}/")
	public void smartRedirectWithAutoTracking(
			@PathVariable("customerParam") String customerParam,
			@RequestParam Map<String, String> allParams,
			HttpServletRequest request, 
			HttpServletResponse response) throws UnsupportedEncodingException, IOException {
		
		log.info("Smart redirect with auto-tracking - customerParam: {}, allParams: {}", customerParam, allParams);
		
		// Generar tracking autom√°tico √∫nico
		String autoGeneratedTracking = generateAutoTracking();
		log.info("Auto-tracking generado: {}", autoGeneratedTracking);
		
		// Procesar redirecci√≥n inteligente
		smartRedirectProcessor.processSmartRedirect(customerParam, autoGeneratedTracking, true, request, response);
	}

	/**
	 * Endpoint para redirecci√≥n inteligente con tracking externo
	 * URL: /smart/{customer_id_encrypted}/
	 */
	@GetMapping("/{customerParam}/")
	public void smartRedirectWithExternalTracking(
			@PathVariable("customerParam") String customerParam,
			@RequestParam Map<String, String> allParams,
			HttpServletRequest request, 
			HttpServletResponse response) throws UnsupportedEncodingException, IOException {
		
		log.info("Smart redirect with external tracking - customerParam: {}, allParams: {}", customerParam, allParams);
		
		// Usar tracking externo o generar uno b√°sico
		String externalTracking = allParams.getOrDefault("tracking", "EXT_" + System.currentTimeMillis());
		log.info("External tracking: {}", externalTracking);
		
		// Procesar redirecci√≥n inteligente
		smartRedirectProcessor.processSmartRedirect(customerParam, externalTracking, false, request, response);
	}

	/**
	 * Genera un tracking ID √∫nico autom√°ticamente
	 */
	private String generateAutoTracking() {
		// Formato: XAFRA_YYYYMMDD_HHMMSS_UUID8
		java.time.ZonedDateTime now = java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC);
		java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
		String timestamp = now.format(formatter);
		// Usar UUID parcial para garantizar unicidad absoluta
		String uniqueSuffix = java.util.UUID.randomUUID().toString().replace("-", "").substring(0, 8);
		return "XAFRA_" + timestamp + "_" + uniqueSuffix;
	}

}
